/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type TweetEmbed = {
  _type: 'tweetEmbed';
  url?: string;
};

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
      listItem?: 'bullet';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      caption?: string;
      _type: 'contentImage';
      _key: string;
    }
  | ({
      _key: string;
    } & TweetEmbed)
>;

export type LiveBlogContent = {
  _id: string;
  _type: 'liveBlogContent';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  parent?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'liveBlog';
  };
  headline?: string;
  authors?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'author';
  }>;
  isEssential?: boolean;
  postDateTime?: string;
  content?: BlockContent;
};

export type LiveBlog = {
  _id: string;
  _type: 'liveBlog';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  category?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'category';
  };
  featuredImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    attribution?: string;
    _type: 'image';
  };
  startDateTime?: string;
  endDateTime?: string;
  context?: BlockContent;
};

export type Author = {
  _id: string;
  _type: 'author';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  profilePhoto?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  twitter?: string;
  instagram?: string;
  facebook?: string;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type FrontPageLayout = {
  _id: string;
  _type: 'frontPageLayout';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  regions?: Array<string>;
  topStory?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'newsStory';
  };
  sideStoriesPrimary?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'newsStory';
  }>;
  sideStoriesSecondary?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'newsStory';
  }>;
};

export type NewsStory = {
  _id: string;
  _type: 'newsStory';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  subtitle?: string;
  authors?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'author';
  }>;
  slug?: Slug;
  category?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'category';
  };
  excerpt?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  location?: string;
  regionAvailability?: Array<string>;
  featuredImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: 'contentImage';
  };
  content?: BlockContent;
};

export type ContentImage = {
  _type: 'contentImage';
  asset?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  caption?: string;
};

export type Category = {
  _id: string;
  _type: 'category';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | TweetEmbed
  | BlockContent
  | LiveBlogContent
  | LiveBlog
  | Author
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | FrontPageLayout
  | NewsStory
  | ContentImage
  | Category
  | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../bm-news-frontend/app/sanity/queries.ts
// Variable: frontPageQuery
// Query: //*[_type == "frontPageLayout"]//*[_type == "newsStory"]*[_type == "frontPageLayout" && name == "main"]{    sideStoriesPrimary[]-> {      _updatedAt,      authors[]->{name, profilePhoto{asset->{url}}},      title,      "categoryName": category->.name,      excerpt,      "slugCurrent": slug.current,      featuredImage{..., asset->},      "contentWordCount": count(              string::split(                // pt::text extracts plain text for a portable text block                pt::text(content),                " "              )),    },    sideStoriesSecondary[]-> {      _updatedAt,      authors[]->{name, profilePhoto{asset->{url}}},      title,      "categoryName": category->.name,      excerpt,      "slugCurrent": slug.current,      featuredImage{..., asset->},      "contentWordCount": count(              string::split(                // pt::text extracts plain text for a portable text block                pt::text(content),                " "              )),    },    topStory->{      _updatedAt,      authors[]->{name, profilePhoto{asset->{url}}},      title,      "categoryName": category->.name,      excerpt,      "slugCurrent": slug.current,      featuredImage{..., asset->},      "contentWordCount": count(          string::split(            // pt::text extracts plain text for a portable text block            pt::text(content),            " "          )),    }}[0]
export type FrontPageQueryResult = {
  sideStoriesPrimary: Array<{
    _updatedAt: string;
    authors: Array<{
      name: string | null;
      profilePhoto: {
        asset: {
          url: string | null;
        } | null;
      } | null;
    }> | null;
    title: string | null;
    categoryName: string | null;
    excerpt: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }> | null;
    slugCurrent: string | null;
    featuredImage: {
      asset: {
        _id: string;
        _type: 'sanity.imageAsset';
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      caption?: string;
      _type: 'contentImage';
    } | null;
    contentWordCount: number;
  }> | null;
  sideStoriesSecondary: Array<{
    _updatedAt: string;
    authors: Array<{
      name: string | null;
      profilePhoto: {
        asset: {
          url: string | null;
        } | null;
      } | null;
    }> | null;
    title: string | null;
    categoryName: string | null;
    excerpt: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }> | null;
    slugCurrent: string | null;
    featuredImage: {
      asset: {
        _id: string;
        _type: 'sanity.imageAsset';
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      caption?: string;
      _type: 'contentImage';
    } | null;
    contentWordCount: number;
  }> | null;
  topStory: {
    _updatedAt: string;
    authors: Array<{
      name: string | null;
      profilePhoto: {
        asset: {
          url: string | null;
        } | null;
      } | null;
    }> | null;
    title: string | null;
    categoryName: string | null;
    excerpt: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }> | null;
    slugCurrent: string | null;
    featuredImage: {
      asset: {
        _id: string;
        _type: 'sanity.imageAsset';
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      caption?: string;
      _type: 'contentImage';
    } | null;
    contentWordCount: number;
  } | null;
} | null;
// Variable: singleNewsStoryQuery
// Query: *[_type == "newsStory" && slug.current == $slug]{  _updatedAt,  content[]{    ...,    _type == "contentImage" => {      ...,      asset->    },    _type == "tweetEmbed" => {      url    }  },  featuredImage{..., asset->},  title,  subtitle,  category->{name, slug},  slug,  authors[]->{name, profilePhoto{asset->}, slug},  excerpt,  "contentWordCount": count(      string::split(        // pt::text extracts plain text for a portable text block        pt::text(content),        " "      )),}[0]
export type SingleNewsStoryQueryResult = {
  _updatedAt: string;
  content: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal';
        listItem?: 'bullet';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset: {
          _id: string;
          _type: 'sanity.imageAsset';
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        caption?: string;
        _type: 'contentImage';
        _key: string;
      }
    | {
        _key: string;
        _type: 'tweetEmbed';
        url: string | null;
      }
  > | null;
  featuredImage: {
    asset: {
      _id: string;
      _type: 'sanity.imageAsset';
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: 'contentImage';
  } | null;
  title: string | null;
  subtitle: string | null;
  category: {
    name: string | null;
    slug: Slug | null;
  } | null;
  slug: Slug | null;
  authors: Array<{
    name: string | null;
    profilePhoto: {
      asset: {
        _id: string;
        _type: 'sanity.imageAsset';
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
    } | null;
    slug: Slug | null;
  }> | null;
  excerpt: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }> | null;
  contentWordCount: number;
} | null;
// Variable: liveBlogContentQuery
// Query: *[_type == "liveBlog" && slug.current == $slug] {  ...,  category->,  "posts": *[_type == "liveBlogContent" && references(^._id) && defined(postDateTime)] {    _id,    headline,    postDateTime,    _updatedAt,    isEssential,    authors[]->{      ...,      profilePhoto{        ...,        asset->      }    },    content  } | order(postDateTime desc)}[0]
export type LiveBlogContentQueryResult = {
  _id: string;
  _type: 'liveBlog';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  category: {
    _id: string;
    _type: 'category';
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug?: Slug;
  } | null;
  featuredImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    attribution?: string;
    _type: 'image';
  };
  startDateTime?: string;
  endDateTime?: string;
  context?: BlockContent;
  posts: Array<{
    _id: string;
    headline: string | null;
    postDateTime: string | null;
    _updatedAt: string;
    isEssential: boolean | null;
    authors: Array<{
      _id: string;
      _type: 'author';
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      name?: string;
      slug?: Slug;
      profilePhoto: {
        asset: {
          _id: string;
          _type: 'sanity.imageAsset';
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      } | null;
      twitter?: string;
      instagram?: string;
      facebook?: string;
    }> | null;
    content: BlockContent | null;
  }>;
} | null;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    '\n//*[_type == "frontPageLayout"]\n//*[_type == "newsStory"]\n*[_type == "frontPageLayout" && name == "main"]\n{\n    sideStoriesPrimary[]-> {\n      _updatedAt,\n      authors[]->{name, profilePhoto{asset->{url}}},\n      title,\n      "categoryName": category->.name,\n      excerpt,\n      "slugCurrent": slug.current,\n      featuredImage{..., asset->},\n      "contentWordCount": count(\n              string::split(\n                // pt::text extracts plain text for a portable text block\n                pt::text(content),\n                " "\n              )),\n    },\n    sideStoriesSecondary[]-> {\n      _updatedAt,\n      authors[]->{name, profilePhoto{asset->{url}}},\n      title,\n      "categoryName": category->.name,\n      excerpt,\n      "slugCurrent": slug.current,\n      featuredImage{..., asset->},\n      "contentWordCount": count(\n              string::split(\n                // pt::text extracts plain text for a portable text block\n                pt::text(content),\n                " "\n              )),\n    },\n    topStory->{\n      _updatedAt,\n      authors[]->{name, profilePhoto{asset->{url}}},\n      title,\n      "categoryName": category->.name,\n      excerpt,\n      "slugCurrent": slug.current,\n      featuredImage{..., asset->},\n      "contentWordCount": count(\n          string::split(\n            // pt::text extracts plain text for a portable text block\n            pt::text(content),\n            " "\n          )),\n    }\n}[0]\n': FrontPageQueryResult;
    '\n*[_type == "newsStory" && slug.current == $slug]{\n  _updatedAt,\n  content[]{\n    ...,\n    _type == "contentImage" => {\n      ...,\n      asset->\n    },\n    _type == "tweetEmbed" => {\n      url\n    }\n  },\n  featuredImage{..., asset->},\n  title,\n  subtitle,\n  category->{name, slug},\n  slug,\n  authors[]->{name, profilePhoto{asset->}, slug},\n  excerpt,\n  "contentWordCount": count(\n      string::split(\n        // pt::text extracts plain text for a portable text block\n        pt::text(content),\n        " "\n      )),\n}[0]\n': SingleNewsStoryQueryResult;
    '\n*[_type == "liveBlog" && slug.current == $slug] {\n  ...,\n  category->,\n  "posts": *[_type == "liveBlogContent" && references(^._id) && defined(postDateTime)] {\n    _id,\n    headline,\n    postDateTime,\n    _updatedAt,\n    isEssential,\n    authors[]->{\n      ...,\n      profilePhoto{\n        ...,\n        asset->\n      }\n    },\n    content\n  } | order(postDateTime desc)\n}[0]\n': LiveBlogContentQueryResult;
  }
}
